<style lang="less">
.print {
  background-color: #f7f7f7;
  position: relative;
  height: 1100rpx;
}

.draw {
  height: 652rpx;
  width: 710rpx;
  background-color: #fff;
  box-sizing: border-box;
  margin: 20rpx;
  border-radius: 20rpx;
  position: relative;
  overflow: hidden;
}

.img {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%)
}

.item {
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  margin-bottom: 20rpx;
  background-color: #fff;
  position: fixed;
  bottom: 0;
  width: 100%;
}

.item .title {
  padding: 0 24rpx 0 40rpx;
  color: #f1f1f1;
  font-size: 28rpx;
  height: 68rpx;
  line-height: 68rpx;
  border-bottom: 2rpx solid #ccc;
  background-color: #0497FF;
  border-top-left-radius: 20rpx;
  border-top-right-radius: 20rpx;
}

.item .val {
  padding: 0 24rpx 0 40rpx;
  display: flex;
  height: 104rpx;
  border-bottom: 2rpx solid #ccc;
  align-items: center;
  justify-content: space-between;
}

.item .val:last-child {
  border-bottom: 0;
}

.item .val .rightarrow {
  width: 28rpx;
  height: 28rpx;
  vertical-align: middle;
}

.item .val .right text{
  color: #666;
}

.item .val .right {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  flex-wrap: nowrap;
}

.item .val .right image {
  width: 28rpx;
  height: 28rpx;
  vertical-align: middle;
}

.item .val .right text {
  color: #666;
  margin-right: 10rpx;
}

.item .val .right .symbol {
  width: 236rpx;
  height: 68rpx;
  border: 2rpx solid #0497ff;
  border-radius: 10rpx;
  display: flex;
  justify-content: space-around;
  align-items: center;
  margin-left: 10rpx;
}

.item .val .right .symbol text {
  font-size: 40rpx;
  color: #0497ff;
  margin: 0;
  width: 100%;
  height: 68rpx;
  line-height: 68rpx;
  text-align: center;
}

.item .val .right .symbol .add {
  border-left: 1rpx solid #0497ff;
}

.item .btn {
  width: 80%;
  background-color: #0497FF;
  color: #f1f1f1;
  margin: 40rpx auto;
}

</style>
<template>
  <view class="print">
  <view class='draw'>
    <image class='img'></image>
  </view>

  <view class='item'>
    <view class='title'>设备状态</view>
    <navigator class='val' url='/pages/blueTooth'>
      <text class='text'>设备状态</text>
      <view class='right'>
        <text>{{blueTooth ? "蓝牙已连接" : "蓝牙未连接"}}</text>
        <image class='rightarrow' src='/images/@2x/attribute_rightarrow@2x.png'></image>
      </view>
    </navigator>
    <view class='val'>
      <text class='text'>打印份数</text>
      <view class='right'>
        <text>{{printNum}}份</text>
        <view class='symbol'>
          <text class='subtract' data-target='printNum' data-add="0" @tap="changeNumber">-</text>
          <text class='add' data-target='printNum' data-add="1" @tap="changeNumber">+</text>
        </view>
      </view>
    </view>
    <button class='btn' @tap='print'>打印</button>
  </view>
</view>
</template>

<script>
  import wepy from 'wepy'
  import {connect} from 'wepy-redux'
  import Toast from 'wepy-com-toast'
  import testMixin from '../mixins/test'

  @connect({
    num(state) {
      return state.counter.num
    },
    asyncNum(state) {
      return state.counter.asyncNum
    },
    sumNum(state) {
      return state.counter.num + state.counter.asyncNum
    }
  })

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '打印'
    }
    components = {}

    mixins = [testMixin]

    data = {
      blueTooth: false,
      printNum: 1
    }

    methods = {
      changeNumber(e) {
        const target = e.currentTarget.dataset.target
        const add = e.currentTarget.dataset.add

        let value;
        if (add == 1) {
          value = this.data[target] + 1

        } else {
          if (this.data[target] == 1) return

          value = this.data[target] - 1
        }

        this.setData({
          [target]: value
        })
      },

      print(){
        console.log(1)

        this.$navigate('./edit')
      }
    }

    events = {
      'index-emit': (...args) => {
        let $event = args[args.length - 1]
        console.log(`${this.$name} receive ${$event.name} from ${$event.source.$name}`)
      }
    }

    onLoad(options) {}
  }
</script>
